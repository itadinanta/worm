!!ARBvp1.0
#
# cartoon lighting
# standard lighting, separation between color, shade and specular
# single point light at GL_LIGHT0
#

	ATTRIB iPos         = vertex.position;
	ATTRIB iNormal      = vertex.normal;
#	PARAM  mvinv[4]     = { state.matrix.modelview.invtrans };
	PARAM  mvp[4]       = { state.matrix.mvp };
	PARAM  mv[4]		= { state.matrix.modelview };
	PARAM  vinv[4] 		= { state.matrix.program[0].inverse };
	PARAM  camera		= program.local[0];
	PARAM  lightPos     = state.light[0].position;
	PARAM  specExp      = state.material.shininess;
	PARAM  ambientCol   = state.lightprod[0].ambient;
	PARAM  diffuseCol   = state.lightprod[0].diffuse;
	PARAM  specularCol  = state.lightprod[0].specular;
	PARAM  zero	    = {0.0, 0.0, 0.0, 1.0};
	PARAM  lum	    = {0.3, 0.6, 0.1, 1.0};
	PARAM  oneHalf		= {0.5, 0.5, 0.5, 1.0};
	PARAM  Z		= {0.0, 0.0, 1.0, 1.0};
	TEMP   tmpPos, xfNormal, xfLight, xfV, halfDir, temp, dots;
	OUTPUT oPos         = result.position;
	OUTPUT oColor       = result.color;
	OUTPUT oShade	    = result.texcoord[1];
	OUTPUT oTex	    = result.texcoord[0];
	OUTPUT oTexR	    = result.texcoord[2];

# Transform vertex to camera space

	DP4   xfV.x, mv[0], iPos;
	DP4   xfV.y, mv[1], iPos;
	DP4   xfV.z, mv[2], iPos;
	DP4   xfV.w, mv[3], iPos;

# Transform normal to camera space

	DP3   xfNormal.x, mv[0], iNormal;
	DP3   xfNormal.y, mv[1], iNormal;
	DP3   xfNormal.z, mv[2], iNormal;

# Normalized light direction (light is in camera space)

	ADD   xfLight, lightPos, -xfV;
	DP3   temp.w, xfLight, xfLight;
	RSQ   temp.w, temp.w;
	MUL   xfLight.xyz, temp.w, xfLight;

# Normalized view direction

	DP3   temp.w, xfV, xfV;
	RSQ   temp.w, temp.w;
	MUL   xfV.xyz, -temp.w, xfV;

# halfDir

	ADD	  halfDir, xfV, xfLight;
	MUL	  halfDir, oneHalf, halfDir;       
		        
# Compute diffuse and specular dot products and use LIT to compute
# lighting coefficients.

	DP3   dots.x, xfNormal, xfLight;
	DP3   dots.y, xfNormal, halfDir;
	MOV   dots.w, specExp.x;
	LIT   dots, dots;

#	Reflected view direction
#			float coef = 2*(x * s.x + y * s.y + z * s.z);
#			d.set(s.x-coef*x,s.y-coef*y,s.z-coef*z);	

	DP3 temp, xfNormal, -xfV;          # compute reflected dir 
	ADD temp, temp, temp;		   # 		
	MAD temp, xfNormal, -temp, -xfV;   # cube texture coords
					   # in camera space...

	DP3 tmpPos.x, vinv[0], temp;	   # must transform back in world space
	DP3 tmpPos.y, vinv[1], temp;	   # need the view matrix alone...	
	DP3 tmpPos.z, vinv[2], temp;	   # bah!
	MOV oTexR, tmpPos;

	# Transform the vertex to clip coordinates.   
	DP4   oPos.x, mvp[0], iPos;
	DP4   oPos.y, mvp[1], iPos;
	DP4   oPos.z, mvp[2], iPos;
	DP4   oPos.w, mvp[3], iPos;
	
	# stores results in texcoord[1]
	MOV   oShade.x, dots.y;
	MOV   oShade.y, dots.z;	

	# bypass color&texture assignment
	MOV   oColor, vertex.color;
	MOV   oTex, vertex.texcoord[0];
END